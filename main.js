/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => GithubOverhaul
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var import_https = __toESM(require("https"));
var DEFAULT_SETTINGS = {
  Github_username: "username"
};
var GithubOverhaul = class extends import_obsidian.Plugin {
  // Configure resources needed by the plugin.
  async onload() {
    await this.loadSettings();
    this.addCommand({
      id: "print-greeting-to-console",
      name: "Print greeting to console",
      callback: () => {
        console.log("Greeting");
      }
    });
    this.addCommand({
      id: "editor-sample",
      name: "editor-sample-command",
      editorCallback: (editor, view) => {
        const sel = editor.getSelection();
        console.log(`You have selected: ${sel}`);
      }
    });
    this.addRibbonIcon("github", "Open menu", (event) => {
      const menu = new import_obsidian.Menu();
      menu.addItem(
        (item) => item.setTitle("Sync").setIcon("folder-sync").onClick(() => {
          new import_obsidian.Notice("Copied");
        })
      );
      menu.addItem(
        (item) => item.setTitle("Paste").setIcon("paste").onClick(() => {
          new import_obsidian.Notice("Pasted");
        })
      );
      menu.showAtMouseEvent(event);
    });
    this.registerEvent(
      this.app.workspace.on("file-menu", (menu, file) => {
        menu.addItem((item) => {
          item.setTitle("Comment").setIcon("message-square").onClick(async () => {
            let response = await this.getComments("NathanDSanta", "githubTesting", 1);
            console.log("Button getComments", response);
          });
        });
        menu.addItem((item) => {
          item.setTitle("getComments").setIcon("arrow-down-to-line").onClick(async () => {
            let response = await this.getComments("NathanDSanta", "githubTesting", 1);
            console.log("Button getComments", response);
          });
        });
      })
    );
    this.addSettingTab(new SampleSettingTab(this.app, this));
  }
  // Release any resources configured by the plugin.
  async onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async fetchAPI(url) {
    try {
      const response = await fetch(url, {
        method: "GET",
        // or POST, PUT, DELETE, etc.
        headers: {
          "Content-Type": "application/json"
          // Add additional headers if needed
        }
      });
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      const data = await response.json();
      return data;
    } catch (error) {
      console.error("Error fetching API:", error);
      return null;
    }
  }
  async request(options, postData) {
    const req = import_https.default.request(options, (res) => {
      let data = "";
      res.on("data", (chunk) => {
        data += chunk;
      });
      res.on("end", () => {
        console.log("POST Response:", JSON.parse(data));
        return JSON.parse(data);
      });
    });
    req.on("error", (error) => {
      console.error("Error:", error);
    });
    if (postData !== void 0) {
      req.write(postData);
    }
    req.end();
  }
  async getComments(owner, repo, issue) {
    const personalAccessToken = "";
    const options = {
      hostname: "api.github.com",
      path: `/repos/${owner}/${repo}/issues/${issue}/comments`,
      method: "GET",
      headers: {
        "Authorization": `token ${personalAccessToken}`,
        "User-Agent": "Node.js"
      }
    };
    return await this.request(options);
  }
  async addComment(comment, owner, repo, issue) {
    const personalAccessToken = "";
    const postData = JSON.stringify({
      body: comment
    });
    const options = {
      hostname: "api.github.com",
      path: `/repos/${owner}/${repo}/issues/${issue}/comments`,
      method: "POST",
      headers: {
        "Authorization": `token ${personalAccessToken}`,
        "Content-Type": "application/json",
        "Content-Length": Buffer.byteLength(postData),
        "User-Agent": "Node.js"
      }
    };
    return await this.request(options, postData);
  }
};
var SampleSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Github Username").setDesc("Your Github username").addText((text) => text.setPlaceholder("Enter your secret").setValue(this.plugin.settings.Github_username).onChange(async (value) => {
      this.plugin.settings.Github_username = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
